{"version":3,"sources":["types/types.ts","components/proExpoComponents.tsx","components/ExpoRow.tsx","mocks/mocks.ts","components/config.ts","components/ExposTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Provinces","Language","HeaderCell","styled","TableCell","backgroundColor","color","fontWeight","border","BodyCell","padding","BodyRow","TableRow","ExpoRow","expo","name","date","city","products","bonuses","requirements","className","style","textAlign","href","ExpoRowSmall","useState","show","setShow","borderBottom","Button","variant","fontSize","textTransform","onClick","colSpan","exposMock","province","Guandong","Shanghai","Hongkong","mainConfig","en","title","provinces","all","topic","register","ru","ExposTable","setProvince","lang","setLang","main","document","documentElement","clientWidth","setClientWidth","useEffect","window","addEventListener","FormControl","InputLabel","id","Select","labelId","value","onChange","e","target","Object","entries","map","MenuItem","key","Table","TableHead","align","TableBody","filter","i","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAAYA,EAOAC,E,8ECJCC,EAAaC,YAAOC,IAAPD,CAAkB,CAC1CE,gBAAiB,QACjBC,MAAO,QACPC,WAAY,OACZC,OAAQ,oBAGGC,EAAWN,YAAOC,IAAPD,CAAkB,CACxCK,OAAQ,kBACRE,QAAS,IAGEC,EAAUR,YAAOS,IAAPT,CAAiB,CACtCK,OAAQ,oB,QCXGK,EAAU,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAChBC,EAAsDD,EAAtDC,KAAMC,EAAgDF,EAAhDE,KAAMC,EAA0CH,EAA1CG,KAAMC,EAAoCJ,EAApCI,SAAUC,EAA0BL,EAA1BK,QAASC,EAAiBN,EAAjBM,aAC7C,OACE,kBAACT,EAAD,KACE,kBAACF,EAAD,CAAUY,UAAU,aAAaN,GACjC,kBAACN,EAAD,KAAWO,GACX,kBAACP,EAAD,KAAWQ,GACX,kBAACR,EAAD,KAAWS,GACX,kBAACT,EAAD,CAAUa,MAAO,CAAEC,UAAW,WAC5B,uBAAGC,KAAK,KAAR,aAEF,kBAACf,EAAD,KAAWU,GACX,kBAACV,EAAD,KAAWW,KAKJK,EAAe,SAAC,GAA8B,IAA5BX,EAA2B,EAA3BA,KACrBC,EAAsDD,EAAtDC,KAAMC,EAAgDF,EAAhDE,KAAMC,EAA0CH,EAA1CG,KAAMC,EAAoCJ,EAApCI,SAAUC,EAA0BL,EAA1BK,QAASC,EAAiBN,EAAjBM,aADW,EAEhCM,oBAAS,GAFuB,mBAEjDC,EAFiD,KAE3CC,EAF2C,KAGxD,OACE,oCACE,kBAACjB,EAAD,CAASW,MAAQK,EAA6C,GAAtC,CAAEE,aAAc,oBACtC,kBAACpB,EAAD,CAAUY,UAAU,aAAaN,GACjC,kBAACN,EAAD,KACGO,EADH,IACS,6BADT,IACiBC,GAEjB,kBAACR,EAAD,KAAWS,GACX,kBAACT,EAAD,CAAUa,MAAO,CAAEC,UAAW,WAC5B,uBAAGC,KAAK,KAAR,YACA,6BACA,kBAACM,EAAA,EAAD,CACEC,QAAQ,WACRT,MAAO,CAAEU,SAAU,GAAIC,cAAe,aACtCC,QAAS,kBAAMN,GAASD,KAEvBA,EAAO,eAAiB,kBAI9BA,GACC,kBAAChB,EAAD,CAASW,MAAO,CAAEO,aAAc,oBAC9B,kBAACpB,EAAD,CAAU0B,QAAS,GAAIhB,GACvB,kBAACV,EAAD,CAAU0B,QAAS,GAAIf,O,SFhDrBpB,K,oBAAAA,E,oBAAAA,E,oBAAAA,E,WAAAA,M,cAOAC,K,QAAAA,E,SAAAA,M,KGLL,IAAMmC,EAAoB,CAC/B,CACErB,KAAM,mCACNC,KAAM,cACNqB,SAAUrC,EAAUsC,SACpBrB,KAAM,WACNC,SAAU,oBACVC,QAAS,sBACTC,aAAc,oCAEhB,CACEL,KAAM,gBACNC,KAAM,WACNqB,SAAUrC,EAAUuC,SACpBtB,KAAM,WACNC,SAAU,mBACVC,QAAS,gCACTC,aAAc,oDAEhB,CACEL,KAAM,iBACNC,KAAM,WACNqB,SAAUrC,EAAUwC,SACpBvB,KAAM,YACNC,SAAU,kBACVC,QAAS,+BACTC,aAAc,qCAEhB,CACEL,KAAM,mCACNC,KAAM,cACNqB,SAAUrC,EAAUsC,SACpBrB,KAAM,WACNC,SAAU,oBACVC,QAAS,sBACTC,aAAc,oCAEhB,CACEL,KAAM,gBACNC,KAAM,WACNqB,SAAUrC,EAAUuC,SACpBtB,KAAM,WACNC,SAAU,mBACVC,QAAS,gCACTC,aAAc,oDAEhB,CACEL,KAAM,iBACNC,KAAM,WACNqB,SAAUrC,EAAUwC,SACpBvB,KAAM,YACNC,SAAU,kBACVC,QAAS,+BACTC,aAAc,qCAEhB,CACEL,KAAM,mCACNC,KAAM,cACNqB,SAAUrC,EAAUsC,SACpBrB,KAAM,WACNC,SAAU,oBACVC,QAAS,sBACTC,aAAc,oCAEhB,CACEL,KAAM,gBACNC,KAAM,WACNqB,SAAUrC,EAAUuC,SACpBtB,KAAM,WACNC,SAAU,mBACVC,QAAS,gCACTC,aAAc,oDAEhB,CACEL,KAAM,iBACNC,KAAM,WACNqB,SAAUrC,EAAUwC,SACpBvB,KAAM,YACNC,SAAU,kBACVC,QAAS,+BACTC,aAAc,sC,wDClFLqB,EAAa,CACxBC,GAAI,CACFC,MAAO,iDACPN,SAAU,WACVO,UAAW,CACTC,IAAK,MACLL,SAAU,YACVD,SAAU,WACVD,SAAU,YAEZvB,KAAM,OACNC,KAAM,OACNC,KAAM,OACN6B,MAAO,QACPC,SAAU,YACV5B,QAAS,UACTC,aAAc,gBAEhB4B,GAAI,CACFL,MAAO,qJACPN,SAAU,yDACVO,UAAW,CACTC,IAAK,qBACLL,SAAU,6CACVD,SAAU,uCACVD,SAAU,8CAEZvB,KAAM,mDACNC,KAAM,2BACNC,KAAM,iCACN6B,MAAO,mDACPC,SAAU,mFACV5B,QAAS,uCACTC,aAAc,iECfL6B,GDwBGR,EAAWC,GAAGE,UAAUN,SASxBG,EAAWC,GAAGE,UAAUL,SASxBE,EAAWO,GAAGJ,UAAUJ,SAWxBC,EAAWO,GAAGJ,UAAUN,SASxBG,EAAWO,GAAGJ,UAAUL,SASxBE,EAAWC,GAAGE,UAAUJ,SCvEd,WAAO,IAAD,EACEd,mBAAS1B,EAAU6C,KADrB,mBACvBR,EADuB,KACba,EADa,OAENxB,mBAASzB,EAASyC,IAFZ,mBAEvBS,EAFuB,KAEjBC,EAFiB,KAIxBC,EAAOZ,EAAWU,GAJM,EASQzB,mBAAS4B,SAASC,gBAAgBC,aAT1C,mBASvBA,EATuB,KASVC,EATU,KAW9BC,qBAAU,WACRC,OAAOC,iBAAiB,UAAU,WAChCH,EAAeH,SAASC,gBAAgBC,kBAEzC,IAMH,OACE,oCACE,6BACE,kBAAC1B,EAAA,EAAD,CACER,MAAO,CAAEjB,gBAAgB,GAAD,OAAK8C,IAASlD,EAASyC,GAAK,YAAc,UAClEX,QAAQ,WACRG,QAAS,kBAAMkB,EAAQnD,EAASyC,MAHlC,MAOA,kBAACZ,EAAA,EAAD,CACER,MAAO,CAAEjB,gBAAgB,GAAD,OAAK8C,IAASlD,EAAS+C,GAAK,YAAc,UAClEjB,QAAQ,WACRG,QAAS,kBAAMkB,EAAQnD,EAAS+C,MAHlC,OASF,4BAAKK,EAAKV,OAEV,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,GAAG,gBAAgBV,EAAKhB,UACpC,kBAAC2B,EAAA,EAAD,CAAQC,QAAQ,eAAeF,GAAG,SAASG,MAAO7B,EAAU8B,SA3B7C,SAACC,GACpBlB,EAAYkB,EAAEC,OAAOH,SA2BdI,OAAOC,QAAQlB,EAAKT,WAAW4B,KAAI,SAAAnC,GAAQ,OAC1C,kBAACoC,EAAA,EAAD,CAAUC,IAAKrC,EAAS,GAAI6B,MAAO7B,EAAS,IACzCA,EAAS,SAMlB,kBAACsC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAChE,EAAA,EAAD,KACE,kBAACV,EAAD,CAAY2E,MAAM,UAAUxB,EAAKtC,MAChCyC,GAAe,IACd,oCACE,kBAACtD,EAAD,CAAY2E,MAAM,UAAUxB,EAAKrC,MACjC,kBAACd,EAAD,CAAY2E,MAAM,UAAUxB,EAAKpC,OAGnC,kBAACf,EAAD,CAAY2E,MAAM,UACfxB,EAAKrC,KADR,MACiBqC,EAAKpC,MAIxB,kBAACf,EAAD,CAAY2E,MAAM,UAAUxB,EAAKP,OACjC,kBAAC5C,EAAD,CAAY2E,MAAM,UAAUxB,EAAKN,UAChCS,GAAe,KACd,oCACE,kBAACtD,EAAD,CAAY2E,MAAM,UAAUxB,EAAKlC,SACjC,kBAACjB,EAAD,CAAY2E,MAAM,UAAUxB,EAAKjC,iBAKzC,kBAAC0D,EAAA,EAAD,KACG1C,EACE2C,QAAO,SAAAjE,GAAI,MAAiB,QAAbuB,GAAsBvB,EAAKuB,WAAaA,KACvDmC,KAAI,SAAC1D,EAAMkE,GAAP,OACHxB,GAAe,IACb,kBAAC,EAAD,CAAckB,IAAKM,EAAGlE,KAAMA,IAE5B,kBAAC,EAAD,CAAS4D,IAAKM,EAAGlE,KAAMA,YC3FxBmE,EARO,WACpB,OACE,yBAAK5D,UAAU,OACb,kBAAC,EAAD,QCKc6D,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjC,SAASkC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.87e1e576.chunk.js","sourcesContent":["export enum Provinces {\r\n  Guandong = 'Guandong',\r\n  Shanghai = 'Shanghai',\r\n  Hongkong = 'Hongkong',\r\n  all = 'all'\r\n}\r\n\r\nexport enum Language {\r\n  ru = 'ru',\r\n  en = 'en'\r\n}\r\n\r\nexport interface Expo {\r\n  name: string;\r\n  // TODO: add enum for cities\r\n  city: string;\r\n  province: Provinces;\r\n  date: string;\r\n  products: string;\r\n  // TODO: should it be an array of standart bonuses?\r\n  bonuses: string;\r\n  requirements: string;\r\n}\r\n","import { TableCell, TableRow } from '@material-ui/core';\r\nimport { styled } from '@material-ui/styles';\r\n\r\nexport const HeaderCell = styled(TableCell)({\r\n  backgroundColor: 'black',\r\n  color: 'white',\r\n  fontWeight: 'bold',\r\n  border: '1px solid white'\r\n});\r\n\r\nexport const BodyCell = styled(TableCell)({\r\n  border: '1px solid black',\r\n  padding: 3\r\n});\r\n\r\nexport const BodyRow = styled(TableRow)({\r\n  border: '1px solid black'\r\n});\r\n","import React, { useState } from 'react';\r\nimport { Expo } from '../types/types';\r\nimport { BodyCell, BodyRow } from './proExpoComponents';\r\nimport { Button } from '@material-ui/core';\r\n\r\nexport const ExpoRow = ({ expo }: { expo: Expo }) => {\r\n  const { name, date, city, products, bonuses, requirements } = expo;\r\n  return (\r\n    <BodyRow>\r\n      <BodyCell className=\"expo-name\">{name}</BodyCell>\r\n      <BodyCell>{date}</BodyCell>\r\n      <BodyCell>{city}</BodyCell>\r\n      <BodyCell>{products}</BodyCell>\r\n      <BodyCell style={{ textAlign: 'center' }}>\r\n        <a href=\"#\">register</a>\r\n      </BodyCell>\r\n      <BodyCell>{bonuses}</BodyCell>\r\n      <BodyCell>{requirements}</BodyCell>\r\n    </BodyRow>\r\n  );\r\n};\r\n\r\nexport const ExpoRowSmall = ({ expo }: { expo: Expo }) => {\r\n  const { name, date, city, products, bonuses, requirements } = expo;\r\n  const [show, setShow] = useState(false);\r\n  return (\r\n    <>\r\n      <BodyRow style={!show ? { borderBottom: '3px solid black' } : {}}>\r\n        <BodyCell className=\"expo-name\">{name}</BodyCell>\r\n        <BodyCell>\r\n          {date} <br /> {city}\r\n        </BodyCell>\r\n        <BodyCell>{products}</BodyCell>\r\n        <BodyCell style={{ textAlign: 'center' }}>\r\n          <a href=\"#\">register</a>\r\n          <br />\r\n          <Button\r\n            variant=\"outlined\"\r\n            style={{ fontSize: 10, textTransform: 'lowercase' }}\r\n            onClick={() => setShow(!show)}\r\n          >\r\n            {show ? 'hide details' : 'show details'}\r\n          </Button>\r\n        </BodyCell>\r\n      </BodyRow>\r\n      {show && (\r\n        <BodyRow style={{ borderBottom: '3px solid black' }}>\r\n          <BodyCell colSpan={2}>{bonuses}</BodyCell>\r\n          <BodyCell colSpan={2}>{requirements}</BodyCell>\r\n        </BodyRow>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { Expo, Provinces } from '../types/types';\r\n\r\nexport const exposMock: Expo[] = [\r\n  {\r\n    name: 'Greater Bay Area Industrial Expo',\r\n    date: 'Nov 25-26th',\r\n    province: Provinces.Guandong,\r\n    city: 'Shenzhen',\r\n    products: 'equipment, robots',\r\n    bonuses: 'cash subsidy, hotel',\r\n    requirements: '100RMB hotel deposit is required'\r\n  },\r\n  {\r\n    name: 'Shanghai Expo',\r\n    date: 'Oct 42th',\r\n    province: Provinces.Shanghai,\r\n    city: 'Shanghai',\r\n    products: 'fdshsdhd, robots',\r\n    bonuses: 'fgsdfgjf, cash subsidy, hotel',\r\n    requirements: 'fggdksjhfgsdfg, 100RMB hotel deposit is required'\r\n  },\r\n  {\r\n    name: 'Hong Kong Expo',\r\n    date: 'Jan 12th',\r\n    province: Provinces.Hongkong,\r\n    city: 'Hong Kong',\r\n    products: 'hk sgdfh sdfhdh',\r\n    bonuses: 'dshdgh fhdghdh dhdghh, hotel',\r\n    requirements: 'ljlkjhkjh kjhlkjhlkh ljkhklhkhlkh'\r\n  },\r\n  {\r\n    name: 'Greater Bay Area Industrial Expo',\r\n    date: 'Nov 25-26th',\r\n    province: Provinces.Guandong,\r\n    city: 'Shenzhen',\r\n    products: 'equipment, robots',\r\n    bonuses: 'cash subsidy, hotel',\r\n    requirements: '100RMB hotel deposit is required'\r\n  },\r\n  {\r\n    name: 'Shanghai Expo',\r\n    date: 'Oct 42th',\r\n    province: Provinces.Shanghai,\r\n    city: 'Shanghai',\r\n    products: 'fdshsdhd, robots',\r\n    bonuses: 'fgsdfgjf, cash subsidy, hotel',\r\n    requirements: 'fggdksjhfgsdfg, 100RMB hotel deposit is required'\r\n  },\r\n  {\r\n    name: 'Hong Kong Expo',\r\n    date: 'Jan 12th',\r\n    province: Provinces.Hongkong,\r\n    city: 'Hong Kong',\r\n    products: 'hk sgdfh sdfhdh',\r\n    bonuses: 'dshdgh fhdghdh dhdghh, hotel',\r\n    requirements: 'ljlkjhkjh kjhlkjhlkh ljkhklhkhlkh'\r\n  },\r\n  {\r\n    name: 'Greater Bay Area Industrial Expo',\r\n    date: 'Nov 25-26th',\r\n    province: Provinces.Guandong,\r\n    city: 'Shenzhen',\r\n    products: 'equipment, robots',\r\n    bonuses: 'cash subsidy, hotel',\r\n    requirements: '100RMB hotel deposit is required'\r\n  },\r\n  {\r\n    name: 'Shanghai Expo',\r\n    date: 'Oct 42th',\r\n    province: Provinces.Shanghai,\r\n    city: 'Shanghai',\r\n    products: 'fdshsdhd, robots',\r\n    bonuses: 'fgsdfgjf, cash subsidy, hotel',\r\n    requirements: 'fggdksjhfgsdfg, 100RMB hotel deposit is required'\r\n  },\r\n  {\r\n    name: 'Hong Kong Expo',\r\n    date: 'Jan 12th',\r\n    province: Provinces.Hongkong,\r\n    city: 'Hong Kong',\r\n    products: 'hk sgdfh sdfhdh',\r\n    bonuses: 'dshdgh fhdghdh dhdghh, hotel',\r\n    requirements: 'ljlkjhkjh kjhlkjhlkh ljkhklhkhlkh'\r\n  }\r\n];\r\n","export const mainConfig = {\r\n  en: {\r\n    title: 'Currently Available for Registration Expo List',\r\n    province: 'Province',\r\n    provinces: {\r\n      all: 'all',\r\n      Hongkong: 'Hong Kong',\r\n      Shanghai: 'Shanghai',\r\n      Guandong: 'Guandong'\r\n    },\r\n    name: 'Name',\r\n    date: 'Date',\r\n    city: 'City',\r\n    topic: 'Topic',\r\n    register: 'Form link',\r\n    bonuses: 'Bonuses',\r\n    requirements: 'Requirements'\r\n  },\r\n  ru: {\r\n    title: 'Актуальный список выставок',\r\n    province: 'Провинция',\r\n    provinces: {\r\n      all: 'все',\r\n      Hongkong: 'Гонконг',\r\n      Shanghai: 'Шанхай',\r\n      Guandong: 'Гуандун'\r\n    },\r\n    name: 'Название',\r\n    date: 'Дата',\r\n    city: 'Город',\r\n    topic: 'Тематика',\r\n    register: 'Ссылка на форму',\r\n    bonuses: 'Бонусы',\r\n    requirements: 'Требования'\r\n  }\r\n};\r\n\r\nexport const exposConfig = {\r\n  en: [\r\n    {\r\n      name: 'Greater Bay Area Industrial Expo',\r\n      date: 'Nov 25-26th',\r\n      province: mainConfig.en.provinces.Guandong,\r\n      city: 'Shenzhen',\r\n      products: 'equipment, robots',\r\n      bonuses: 'cash subsidy, hotel',\r\n      requirements: '100RMB hotel deposit is required'\r\n    },\r\n    {\r\n      name: 'Shanghai Expo',\r\n      date: 'Oct 42th',\r\n      province: mainConfig.en.provinces.Shanghai,\r\n      city: 'Shanghai',\r\n      products: 'fdshsdhd, robots',\r\n      bonuses: 'fgsdfgjf, cash subsidy, hotel',\r\n      requirements: 'fggdksjhfgsdfg, 100RMB hotel deposit is required'\r\n    },\r\n    {\r\n      name: 'Hong Kong Expo',\r\n      date: 'Jan 12th',\r\n      province: mainConfig.ru.provinces.Hongkong,\r\n      city: 'Hong Kong',\r\n      products: 'hk sgdfh sdfhdh',\r\n      bonuses: 'dshdgh fhdghdh dhdghh, hotel',\r\n      requirements: 'ljlkjhkjh kjhlkjhlkh ljkhklhkhlkh'\r\n    }\r\n  ],\r\n  ru: [\r\n    {\r\n      name: 'Greater Bay Area Industrial Expo',\r\n      date: 'Nov 25-26th',\r\n      province: mainConfig.ru.provinces.Guandong,\r\n      city: 'Shenzhen',\r\n      products: 'equipment, robots',\r\n      bonuses: 'cash subsidy, hotel',\r\n      requirements: '100RMB hotel deposit is required'\r\n    },\r\n    {\r\n      name: 'Shanghai Expo',\r\n      date: 'Oct 42th',\r\n      province: mainConfig.ru.provinces.Shanghai,\r\n      city: 'Shanghai',\r\n      products: 'fdshsdhd, robots',\r\n      bonuses: 'fgsdfgjf, cash subsidy, hotel',\r\n      requirements: 'fggdksjhfgsdfg, 100RMB hotel deposit is required'\r\n    },\r\n    {\r\n      name: 'Hong Kong Expo',\r\n      date: 'Jan 12th',\r\n      province: mainConfig.en.provinces.Hongkong,\r\n      city: 'Hong Kong',\r\n      products: 'hk sgdfh sdfhdh',\r\n      bonuses: 'dshdgh fhdghdh dhdghh, hotel',\r\n      requirements: 'ljlkjhkjh kjhlkjhlkh ljkhklhkhlkh'\r\n    }\r\n  ]\r\n};\r\n","import React, { useState, ChangeEvent, useEffect } from 'react';\r\nimport { ExpoRow, ExpoRowSmall } from './ExpoRow';\r\nimport { exposMock } from '../mocks/mocks';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableRow,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Button\r\n} from '@material-ui/core';\r\nimport { HeaderCell } from './proExpoComponents';\r\nimport { Provinces, Language } from '../types/types';\r\nimport { mainConfig, exposConfig } from './config';\r\n\r\nexport const ExposTable = () => {\r\n  const [province, setProvince] = useState(Provinces.all);\r\n  const [lang, setLang] = useState(Language.en);\r\n\r\n  const main = mainConfig[lang];\r\n  const ex = exposConfig[lang];\r\n\r\n  //console.log(window.navigator.language);\r\n\r\n  const [clientWidth, setClientWidth] = useState(document.documentElement.clientWidth);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', () => {\r\n      setClientWidth(document.documentElement.clientWidth);\r\n    });\r\n  }, []);\r\n\r\n  const handleChange = (e: ChangeEvent<any>) => {\r\n    setProvince(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Button\r\n          style={{ backgroundColor: `${lang === Language.en ? 'lightgrey' : 'white'}` }}\r\n          variant=\"outlined\"\r\n          onClick={() => setLang(Language.en)}\r\n        >\r\n          EN\r\n        </Button>\r\n        <Button\r\n          style={{ backgroundColor: `${lang === Language.ru ? 'lightgrey' : 'white'}` }}\r\n          variant=\"outlined\"\r\n          onClick={() => setLang(Language.ru)}\r\n        >\r\n          RU\r\n        </Button>\r\n      </div>\r\n\r\n      <h2>{main.title}</h2>\r\n\r\n      <FormControl>\r\n        <InputLabel id=\"select-label\">{main.province}</InputLabel>\r\n        <Select labelId=\"select-label\" id=\"select\" value={province} onChange={handleChange}>\r\n          {Object.entries(main.provinces).map(province => (\r\n            <MenuItem key={province[0]} value={province[0]}>\r\n              {province[1]}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <HeaderCell align=\"center\">{main.name}</HeaderCell>\r\n            {clientWidth >= 640 ? (\r\n              <>\r\n                <HeaderCell align=\"center\">{main.date}</HeaderCell>\r\n                <HeaderCell align=\"center\">{main.city}</HeaderCell>\r\n              </>\r\n            ) : (\r\n              <HeaderCell align=\"center\">\r\n                {main.date} / {main.city}\r\n              </HeaderCell>\r\n            )}\r\n\r\n            <HeaderCell align=\"center\">{main.topic}</HeaderCell>\r\n            <HeaderCell align=\"center\">{main.register}</HeaderCell>\r\n            {clientWidth >= 640 && (\r\n              <>\r\n                <HeaderCell align=\"center\">{main.bonuses}</HeaderCell>\r\n                <HeaderCell align=\"center\">{main.requirements}</HeaderCell>\r\n              </>\r\n            )}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {exposMock\r\n            .filter(expo => province === 'all' || expo.province === province)\r\n            .map((expo, i) =>\r\n              clientWidth <= 640 ? (\r\n                <ExpoRowSmall key={i} expo={expo} />\r\n              ) : (\r\n                <ExpoRow key={i} expo={expo} />\r\n              )\r\n            )}\r\n        </TableBody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport { ExposTable } from './components/ExposTable';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <ExposTable />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}